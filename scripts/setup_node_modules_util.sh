#!/usr/bin/env bash

# Copyright 2018 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
source $(dirname $0)/setup.sh || exit 1

# Adjust the path to include a reference to node.
export NODE_PATH=$TOOLS_DIR/node-6.9.1
export PATH=$NODE_PATH/bin:$PATH

if [ ! "${OS}" == "Darwin" -a ! "${OS}" == "Linux" ]; then
  # Node is a requirement for all installation scripts. Here, we check if the
  # OS supports node.js installation; if not, we exit with an error.
  echo ""
  echo "  WARNING: Unsupported OS for installation of node.js."
  echo "  If you are running this script on Windows, see the instructions"
  echo "  here regarding installation of node.js:"
  echo ""
  echo "    https://github.com/oppia/oppia/wiki/Installing-Oppia-%28Windows%29"
  echo ""
  echo "  STATUS: Installation completed except for node.js. Exiting."
  echo ""
  return 1
else
  # Otherwise, npm will be installed locally, in NODE_PATH.
  export NPM_CMD=$NODE_PATH/bin/npm
fi

export NPM_INSTALL="$NPM_CMD install"

# Download and install node.js.
echo Checking if node.js is installed in $TOOLS_DIR
if [ ! -d "$NODE_PATH" ]; then
  echo Installing Node.js
  if [ ${OS} == "Darwin" ]; then
    if [ ${MACHINE_TYPE} == 'x86_64' ]; then
      NODE_FILE_NAME=node-v6.9.1-darwin-x64
    else
      NODE_FILE_NAME=node-v6.9.1-darwin-x86
    fi
  elif [ ${OS} == "Linux" ]; then
    if [ ${MACHINE_TYPE} == 'x86_64' ]; then
      NODE_FILE_NAME=node-v6.9.1-linux-x64
    else
      NODE_FILE_NAME=node-v6.9.1-linux-x86
    fi
  fi

  curl -o node-download.tgz https://nodejs.org/dist/v6.9.1/$NODE_FILE_NAME.tar.gz
  tar xzf node-download.tgz --directory $TOOLS_DIR
  mv $TOOLS_DIR/$NODE_FILE_NAME $NODE_PATH
  rm node-download.tgz

  # Change ownership of $NODE_MODULE_DIR.
  # Note: on some machines, these commands seem to take quite a long time.
  chown -R $ME $NODE_MODULE_DIR
  chmod -R 744 $NODE_MODULE_DIR
fi

# List all node modules that are currently installed. The "npm list" command is
# slow, so we precompute this here and refer to it as needed.
echo "Generating list of installed node modules..."
NPM_INSTALLED_MODULES="$($NPM_CMD list)"
export NPM_INSTALLED_MODULES
echo "Generation completed."

install_node_module() {
  # Usage: install_node_module [module_name] [module_version]
  #
  # module_name: the name of the node module
  # module_version: the expected version of the module

  echo Checking whether $1 is installed
  if [ ! -d "$NODE_MODULE_DIR/$1" ]; then
    echo installing $1
    $NPM_INSTALL $1@$2
  else
    if [[ $NPM_INSTALLED_MODULES != *"$1@$2"* ]]; then
      echo Version of $1 does not match $2. Reinstalling $1...
      $NPM_INSTALL $1@$2
      # Regenerate the list of installed modules.
      NPM_INSTALLED_MODULES="$($NPM_CMD list)"
    fi
  fi
}
export -f install_node_module
